{"ast":null,"code":"var _jsxFileName = \"/Users/j.jones/Code/robotwars/src/App.tsx\";\nimport React, { useState } from 'react';\nimport Dice from './components/Game/Dice';\nimport Player from './components/Game/Player';\nimport Monster from './components/Game/Monster';\nimport Dashboard from './components/Game/Dashboard';\nimport styled from \"styled-components\";\nimport { GameStateProvider } from './context/GameStateContext';\nimport rollDice, { diceDifference } from './utils/dice';\nimport getLoser from './utils/getLoser';\nimport GameStatus from './types/GameStatus'; // used stylised component for simple rendering\n\nconst Container = styled.div`\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n`;\nconst PlayerArea = styled.div`\n    background-color: red;\n`;\nconst MonsterArea = styled.div`\n  background-color: green;\n`;\n\nfunction App() {\n  const [playerHealth, setPlayerHealth] = useState(100);\n  const [monsterHealth, setMonsterHealth] = useState(100);\n  const [setGameStatus] = useState(GameStatus.Fighting);\n  const [dice, setDice] = useState();\n  const [currentPlayersHealth, setCurrentPlayersHealth] = useState(0);\n  const [currentMonsterHealth, setCurrentMonsterHealth] = useState(0);\n  console.log('ph', playerHealth);\n\n  function handleGameClick() {\n    const diceOne = rollDice();\n    const diceTwo = rollDice();\n    const diceThree = rollDice();\n    const diceFour = rollDice();\n    const playsScore = diceOne + diceTwo;\n    setCurrentPlayersHealth(playsScore);\n    const monstersScore = diceThree + diceFour;\n    setCurrentMonsterHealth(monstersScore);\n    console.log('currentPlayersHealth', playsScore);\n    console.log('currentMonsterHealth', monstersScore);\n\n    if (playsScore === monstersScore) {\n      console.log('draw');\n    } else if (monstersScore > playsScore) {\n      console.log('monstor wins');\n      const diff = diceDifference(playsScore, monstersScore);\n      console.log(diff);\n      const newHealth = playerHealth - diff;\n      setMonsterHealth(newHealth);\n    } else {\n      console.log('player wins');\n      const diff = diceDifference(monstersScore, playsScore);\n      console.log(diff);\n      const newHealth = playerHealth - diff;\n      setPlayerHealth(newHealth);\n    }\n\n    const status = getLoser(playerHealth, monsterHealth); //setGameStatus(status)\n\n    const dice = [diceOne, diceTwo, diceThree, diceFour];\n    setDice(dice);\n  }\n\n  return React.createElement(GameStateProvider, {\n    value: {\n      playerHealth,\n      setPlayerHealth,\n      monsterHealth,\n      setMonsterHealth,\n      dice,\n      setDice\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, React.createElement(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, React.createElement(Player, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }), React.createElement(PlayerArea, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, React.createElement(Dice, {\n    roll: dice === null || dice === void 0 ? void 0 : dice[0],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }), React.createElement(Dice, {\n    roll: dice === null || dice === void 0 ? void 0 : dice[1],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }), currentPlayersHealth), React.createElement(MonsterArea, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, React.createElement(Dice, {\n    roll: dice === null || dice === void 0 ? void 0 : dice[2],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }), React.createElement(Dice, {\n    roll: dice === null || dice === void 0 ? void 0 : dice[3],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }), currentMonsterHealth), React.createElement(Monster, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  })), React.createElement(Dashboard, {\n    attackClick: handleGameClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/j.jones/Code/robotwars/src/App.tsx"],"names":["React","useState","Dice","Player","Monster","Dashboard","styled","GameStateProvider","rollDice","diceDifference","getLoser","GameStatus","Container","div","PlayerArea","MonsterArea","App","playerHealth","setPlayerHealth","monsterHealth","setMonsterHealth","setGameStatus","Fighting","dice","setDice","currentPlayersHealth","setCurrentPlayersHealth","currentMonsterHealth","setCurrentMonsterHealth","console","log","handleGameClick","diceOne","diceTwo","diceThree","diceFour","playsScore","monstersScore","diff","newHealth","status"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport Dice from './components/Game/Dice';\nimport Player from './components/Game/Player';\nimport Monster from './components/Game/Monster';\nimport Dashboard from './components/Game/Dashboard';\nimport styled from \"styled-components\"\nimport { GameStateProvider } from './context/GameStateContext';\nimport rollDice, { diceDifference } from './utils/dice';\nimport getLoser from './utils/getLoser';\nimport GameStatus from './types/GameStatus'\n\n// used stylised component for simple rendering\nconst Container = styled.div`\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n`\n\nconst PlayerArea = styled.div`\n    background-color: red;\n`\n\nconst MonsterArea = styled.div`\n  background-color: green;\n`\n\nfunction App() {\n\n    const [ playerHealth, setPlayerHealth ] = useState(100);\n    const [ monsterHealth, setMonsterHealth ] = useState(100);\n    const [ setGameStatus ] = useState(GameStatus.Fighting);\n    const [ dice, setDice ] = useState();\n\n    const [ currentPlayersHealth, setCurrentPlayersHealth ] = useState(0);\n    const [ currentMonsterHealth, setCurrentMonsterHealth ] = useState(0);\n\n    console.log('ph', playerHealth)\n\n    function handleGameClick() {\n        const diceOne : number = rollDice();\n        const diceTwo : number = rollDice();\n\n        const diceThree : number = rollDice();\n        const diceFour : number = rollDice();\n\n        const playsScore = diceOne + diceTwo;\n        setCurrentPlayersHealth(playsScore);\n\n        const monstersScore = diceThree + diceFour;\n        setCurrentMonsterHealth(monstersScore);\n\n        console.log('currentPlayersHealth', playsScore)\n        console.log('currentMonsterHealth', monstersScore)\n\n        if (playsScore === monstersScore) {\n            console.log('draw')\n        } else if (monstersScore > playsScore) {\n            console.log('monstor wins')   \n\n            const diff = diceDifference(playsScore, monstersScore)\n            console.log(diff)\n            const newHealth = playerHealth - diff\n            setMonsterHealth(newHealth)\n        } else {\n            console.log('player wins')\n            const diff = diceDifference(monstersScore, playsScore)\n            console.log(diff)\n            const newHealth = playerHealth - diff\n            setPlayerHealth(newHealth)\n\n        }\n\n        const status = getLoser(playerHealth, monsterHealth);\n        //setGameStatus(status)\n\n        const dice : Array<number> = [diceOne, diceTwo, diceThree, diceFour];\n        setDice(dice);\n      }\n\n    return (\n        <GameStateProvider value={{playerHealth, setPlayerHealth, monsterHealth, setMonsterHealth, dice, setDice}}>\n            <Container>\n                <Player></Player>\n                <PlayerArea>\n                    <Dice roll={dice?.[0]}></Dice>\n                    <Dice roll={dice?.[1]}></Dice>\n                    {currentPlayersHealth}\n                </PlayerArea>\n                <MonsterArea>\n                    <Dice roll={dice?.[2]}></Dice>\n                    <Dice roll={dice?.[3]}></Dice>\n                    {currentMonsterHealth}\n                </MonsterArea>\n                <Monster></Monster>\n            </Container>\n            <Dashboard attackClick={handleGameClick}></Dashboard>\n        </GameStateProvider>\n)}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}