{"ast":null,"code":"var _jsxFileName = \"/Users/j.jones/Code/robotwars/src/App.tsx\";\nimport React, { useState } from 'react';\nimport Dice from './components/Game/Dice';\nimport Player from './components/Game/Player';\nimport Monster from './components/Game/Monster';\nimport Dashboard from './components/Game/Dashboard';\nimport styled from \"styled-components\";\nimport { GameStateProvider } from './context/GameStateContext';\nimport rollRoundsDice from './utils/dice';\nimport getLoser from './utils/getLoser';\nimport GameStatus from './types/GameStatus';\nimport calcauleScore from './utils/score'; // used stylised component for simple rendering\n\nconst Game = styled.div`\n  border: 5px solid #6de0d0;\n  padding: 4em;\n  border-radius: 25px;\n`;\nconst MainArea = styled.div`\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n`;\nconst Score = styled.div`\n    text-align: center;\n    font-size: 4em;\n    font-weight: bold;\n`;\nconst DiceArea = styled.div``;\n\nfunction App() {\n  const [playerHealth, setPlayerHealth] = useState(100);\n  const [monsterHealth, setMonsterHealth] = useState(100);\n  const [, setGameStatus] = useState(GameStatus.Fighting);\n  const [dice, setDice] = useState();\n  const [currentPlayersHealth, setCurrentPlayersRoll] = useState(0);\n  const [currentMonsterHealth, setCurrentMonstersRoll] = useState(0);\n  console.log('ph', playerHealth);\n\n  function handleGameClick() {\n    const dices = rollRoundsDice();\n    setDice(dices);\n    const scores = calcauleScore(dices);\n\n    if (scores) {\n      setCurrentPlayersRoll(playerHealth);\n      setCurrentMonstersRoll(monsterHealth);\n\n      if (scores.playersDamage) {\n        setPlayerHealth(scores.playersDamage - scores.playersScore);\n      } else if (scores.monstersDamage) {\n        setMonsterHealth(scores.monstersDamage - scores.monstersScore);\n      }\n    }\n\n    const status = getLoser(playerHealth, monsterHealth);\n    console.log(status);\n    setGameStatus(status);\n  }\n\n  return React.createElement(Game, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, React.createElement(GameStateProvider, {\n    value: {\n      playerHealth,\n      setPlayerHealth,\n      monsterHealth,\n      setMonsterHealth,\n      dice,\n      setDice\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, React.createElement(MainArea, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, React.createElement(Player, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }), React.createElement(DiceArea, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, React.createElement(Dice, {\n    roll: dice === null || dice === void 0 ? void 0 : dice[0],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }), React.createElement(Dice, {\n    roll: dice === null || dice === void 0 ? void 0 : dice[1],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }), currentPlayersHealth !== 0 && React.createElement(Score, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, currentPlayersHealth)), React.createElement(DiceArea, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, React.createElement(Dice, {\n    roll: dice === null || dice === void 0 ? void 0 : dice[2],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }), React.createElement(Dice, {\n    roll: dice === null || dice === void 0 ? void 0 : dice[3],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }), currentMonsterHealth !== 0 && React.createElement(Score, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, currentMonsterHealth)), React.createElement(Monster, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  })), React.createElement(Dashboard, {\n    attackClick: handleGameClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  })));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/j.jones/Code/robotwars/src/App.tsx"],"names":["React","useState","Dice","Player","Monster","Dashboard","styled","GameStateProvider","rollRoundsDice","getLoser","GameStatus","calcauleScore","Game","div","MainArea","Score","DiceArea","App","playerHealth","setPlayerHealth","monsterHealth","setMonsterHealth","setGameStatus","Fighting","dice","setDice","currentPlayersHealth","setCurrentPlayersRoll","currentMonsterHealth","setCurrentMonstersRoll","console","log","handleGameClick","dices","scores","playersDamage","playersScore","monstersDamage","monstersScore","status"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,OAAP,MAAoB,2BAApB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,iBAAT,QAAkC,4BAAlC;AACA,OAAOC,cAAP,MAA2B,cAA3B;AACA,OAAOC,QAAP,MAAqB,kBAArB;AACA,OAAOC,UAAP,MAAuB,oBAAvB;AACA,OAAOC,aAAP,MAA0B,eAA1B,C,CAEA;;AACA,MAAMC,IAAI,GAAGN,MAAM,CAACO,GAAI;;;;CAAxB;AAMA,MAAMC,QAAQ,GAAGR,MAAM,CAACO,GAAI;;;CAA5B;AAKA,MAAME,KAAK,GAAGT,MAAM,CAACO,GAAI;;;;CAAzB;AAMA,MAAMG,QAAQ,GAAGV,MAAM,CAACO,GAAI,EAA5B;;AAEA,SAASI,GAAT,GAAe;AAEX,QAAM,CAAEC,YAAF,EAAgBC,eAAhB,IAAoClB,QAAQ,CAAC,GAAD,CAAlD;AACA,QAAM,CAAEmB,aAAF,EAAiBC,gBAAjB,IAAsCpB,QAAQ,CAAC,GAAD,CAApD;AACA,QAAM,GAAIqB,aAAJ,IAAsBrB,QAAQ,CAACS,UAAU,CAACa,QAAZ,CAApC;AACA,QAAM,CAAEC,IAAF,EAAQC,OAAR,IAAoBxB,QAAQ,EAAlC;AAEA,QAAM,CAAEyB,oBAAF,EAAwBC,qBAAxB,IAAkD1B,QAAQ,CAAC,CAAD,CAAhE;AACA,QAAM,CAAE2B,oBAAF,EAAwBC,sBAAxB,IAAmD5B,QAAQ,CAAC,CAAD,CAAjE;AAEA6B,EAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ,EAAkBb,YAAlB;;AAEA,WAASc,eAAT,GAA2B;AAEvB,UAAMC,KAAK,GAAGzB,cAAc,EAA5B;AACAiB,IAAAA,OAAO,CAACQ,KAAD,CAAP;AAEA,UAAMC,MAAM,GAAGvB,aAAa,CAACsB,KAAD,CAA5B;;AACA,QAAIC,MAAJ,EAAY;AACRP,MAAAA,qBAAqB,CAACT,YAAD,CAArB;AACAW,MAAAA,sBAAsB,CAACT,aAAD,CAAtB;;AAEA,UAAIc,MAAM,CAACC,aAAX,EAA0B;AACtBhB,QAAAA,eAAe,CAACe,MAAM,CAACC,aAAP,GAAuBD,MAAM,CAACE,YAA/B,CAAf;AACH,OAFD,MAEO,IAAIF,MAAM,CAACG,cAAX,EAA2B;AAC9BhB,QAAAA,gBAAgB,CAACa,MAAM,CAACG,cAAP,GAAwBH,MAAM,CAACI,aAAhC,CAAhB;AACH;AACJ;;AAED,UAAMC,MAAM,GAAG9B,QAAQ,CAACS,YAAD,EAAeE,aAAf,CAAvB;AACAU,IAAAA,OAAO,CAACC,GAAR,CAAYQ,MAAZ;AACAjB,IAAAA,aAAa,CAACiB,MAAD,CAAb;AACD;;AAEH,SACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,iBAAD;AAAmB,IAAA,KAAK,EAAE;AAACrB,MAAAA,YAAD;AAAeC,MAAAA,eAAf;AAAgCC,MAAAA,aAAhC;AAA+CC,MAAAA,gBAA/C;AAAiEG,MAAAA,IAAjE;AAAuEC,MAAAA;AAAvE,KAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAED,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAG,CAAH,CAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAEA,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAG,CAAH,CAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,EAGKE,oBAAoB,KAAK,CAAzB,IACG,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKA,oBADL,CAJR,CAFJ,EAUI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAEF,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAG,CAAH,CAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAEA,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAG,CAAH,CAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,EAGKI,oBAAoB,KAAK,CAAzB,IACG,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKA,oBADL,CAJR,CAVJ,EAkBI,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAlBJ,CADJ,EAqBI,oBAAC,SAAD;AAAW,IAAA,WAAW,EAAEI,eAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IArBJ,CADJ,CADJ;AA0BF;;AAEF,eAAef,GAAf","sourcesContent":["import React, { useState } from 'react';\nimport Dice from './components/Game/Dice';\nimport Player from './components/Game/Player';\nimport Monster from './components/Game/Monster';\nimport Dashboard from './components/Game/Dashboard';\nimport styled from \"styled-components\"\nimport { GameStateProvider } from './context/GameStateContext';\nimport rollRoundsDice from './utils/dice';\nimport getLoser from './utils/getLoser';\nimport GameStatus from './types/GameStatus'\nimport calcauleScore from './utils/score'\n\n// used stylised component for simple rendering\nconst Game = styled.div`\n  border: 5px solid #6de0d0;\n  padding: 4em;\n  border-radius: 25px;\n`\n\nconst MainArea = styled.div`\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n`\n\nconst Score = styled.div`\n    text-align: center;\n    font-size: 4em;\n    font-weight: bold;\n`\n\nconst DiceArea = styled.div``\n\nfunction App() {\n\n    const [ playerHealth, setPlayerHealth ] = useState(100);\n    const [ monsterHealth, setMonsterHealth ] = useState(100);\n    const [ , setGameStatus ] = useState(GameStatus.Fighting);\n    const [ dice, setDice ] = useState();\n\n    const [ currentPlayersHealth, setCurrentPlayersRoll ] = useState(0);\n    const [ currentMonsterHealth, setCurrentMonstersRoll ] = useState(0);\n\n    console.log('ph', playerHealth)\n\n    function handleGameClick() {\n\n        const dices = rollRoundsDice()\n        setDice(dices);\n\n        const scores = calcauleScore(dices)\n        if (scores) {\n            setCurrentPlayersRoll(playerHealth);\n            setCurrentMonstersRoll(monsterHealth);\n    \n            if (scores.playersDamage) {\n                setPlayerHealth(scores.playersDamage - scores.playersScore)\n            } else if (scores.monstersDamage) {\n                setMonsterHealth(scores.monstersDamage - scores.monstersScore)\n            }    \n        }\n\n        const status = getLoser(playerHealth, monsterHealth);\n        console.log(status)\n        setGameStatus(status)\n      }\n\n    return (\n        <Game>\n            <GameStateProvider value={{playerHealth, setPlayerHealth, monsterHealth, setMonsterHealth, dice, setDice}}>\n                <MainArea>\n                    <Player />\n                    <DiceArea>\n                        <Dice roll={dice?.[0]}></Dice>\n                        <Dice roll={dice?.[1]}></Dice>\n                        {currentPlayersHealth !== 0 && \n                            <Score>\n                                {currentPlayersHealth}\n                            </Score>}\n                    </DiceArea>\n                    <DiceArea>\n                        <Dice roll={dice?.[2]}></Dice>\n                        <Dice roll={dice?.[3]}></Dice>\n                        {currentMonsterHealth !== 0 && \n                            <Score>\n                                {currentMonsterHealth}\n                            </Score>}\n                    </DiceArea>\n                    <Monster />\n                </MainArea>\n                <Dashboard attackClick={handleGameClick}></Dashboard>\n            </GameStateProvider>\n        </Game>\n)}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}