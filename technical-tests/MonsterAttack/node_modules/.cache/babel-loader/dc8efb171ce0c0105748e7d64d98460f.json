{"ast":null,"code":"var _jsxFileName = \"/Users/j.jones/Code/robotwars/src/App.tsx\";\nimport React, { useState } from 'react';\nimport Dice from './components/Game/Dice';\nimport Player from './components/Game/Player';\nimport Monster from './components/Game/Monster';\nimport Dashboard from './components/Game/Dashboard';\nimport styled from \"styled-components\";\nimport { GameStateProvider } from './context/GameStateContext';\nimport rollDice from './utils/rollDice';\n// used stylised component for simple rendering\nconst Container = styled.div`\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n`;\nconst PlayerArea = styled.div`\n    background-color: red;\n`;\nconst MonsterArea = styled.div`\n  background-color: green;\n`;\n\nfunction App() {\n  const [playerHealth, setPlayerHealth] = useState(100);\n  const [monsterHealth, setMonsterHealth] = useState(100);\n  const [dice, setDice] = useState();\n  const [currentPlayersHealth, setCurrentPlayersHealth] = useState(0);\n  const [currentMonsterHealth, setCurrentMonsterHealth] = useState(0);\n  console.log('ph', playerHealth);\n\n  function handleGameClick() {\n    const diceOne = rollDice();\n    const diceTwo = rollDice();\n    const diceThree = rollDice();\n    const diceFour = rollDice();\n    setCurrentPlayersHealth(diceOne + diceTwo);\n    setCurrentMonsterHealth(diceThree + diceFour);\n\n    if (currentPlayersHealth === currentMonsterHealth) {\n      console.log('draw');\n    } else if (currentMonsterHealth >= currentPlayersHealth) {\n      console.log('player wins');\n      const diff = currentMonsterHealth - currentPlayersHealth;\n      setPlayerHealth(currentPlayersHealth - diff);\n    } else {\n      const diff = currentPlayersHealth - currentMonsterHealth;\n      setPlayerHealth(currentMonsterHealth - diff);\n      console.log('monstor wins');\n    }\n\n    if (playerHealth <= 0) {\n      console.log('play loses');\n    } else if (monsterHealth <= 0) {\n      console.log('monster loses');\n    }\n\n    const dice = [diceOne, diceTwo, diceThree, diceFour];\n    setDice(dice);\n  }\n\n  return React.createElement(GameStateProvider, {\n    value: {\n      playerHealth,\n      setPlayerHealth,\n      monsterHealth,\n      setMonsterHealth,\n      dice,\n      setDice\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, React.createElement(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, React.createElement(Player, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }), React.createElement(PlayerArea, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, React.createElement(Dice, {\n    roll: dice === null || dice === void 0 ? void 0 : dice[0],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }), React.createElement(Dice, {\n    roll: dice === null || dice === void 0 ? void 0 : dice[1],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }), currentPlayersHealth), React.createElement(MonsterArea, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, React.createElement(Dice, {\n    roll: dice === null || dice === void 0 ? void 0 : dice[2],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }), React.createElement(Dice, {\n    roll: dice === null || dice === void 0 ? void 0 : dice[3],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }), currentMonsterHealth), React.createElement(Monster, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  })), React.createElement(Dashboard, {\n    attackClick: handleGameClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/j.jones/Code/robotwars/src/App.tsx"],"names":["React","useState","Dice","Player","Monster","Dashboard","styled","GameStateProvider","rollDice","Container","div","PlayerArea","MonsterArea","App","playerHealth","setPlayerHealth","monsterHealth","setMonsterHealth","dice","setDice","currentPlayersHealth","setCurrentPlayersHealth","currentMonsterHealth","setCurrentMonsterHealth","console","log","handleGameClick","diceOne","diceTwo","diceThree","diceFour","diff"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport Dice from './components/Game/Dice';\nimport Player from './components/Game/Player';\nimport Monster from './components/Game/Monster';\nimport Dashboard from './components/Game/Dashboard';\nimport styled from \"styled-components\"\nimport { GameStateProvider } from './context/GameStateContext';\nimport rollDice from './utils/rollDice';\nimport getLoser from './utils/getLoser';\n\n// used stylised component for simple rendering\nconst Container = styled.div`\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n`\n\nconst PlayerArea = styled.div`\n    background-color: red;\n`\n\nconst MonsterArea = styled.div`\n  background-color: green;\n`\n\nfunction App() {\n\n    const [ playerHealth, setPlayerHealth ] = useState(100);\n    const [ monsterHealth, setMonsterHealth ] = useState(100);\n    const [ dice, setDice ] = useState();\n\n    const [ currentPlayersHealth, setCurrentPlayersHealth ] = useState(0);\n    const [ currentMonsterHealth, setCurrentMonsterHealth ] = useState(0);\n\n    console.log('ph', playerHealth)\n\n    function handleGameClick() {\n        const diceOne : number = rollDice();\n        const diceTwo : number = rollDice();\n\n        const diceThree : number = rollDice();\n        const diceFour : number = rollDice();\n\n        setCurrentPlayersHealth(diceOne + diceTwo);\n        setCurrentMonsterHealth(diceThree + diceFour);\n\n        if (currentPlayersHealth === currentMonsterHealth) {\n            console.log('draw')\n        } else if (currentMonsterHealth >= currentPlayersHealth) {\n            console.log('player wins')\n            const diff = currentMonsterHealth - currentPlayersHealth\n            setPlayerHealth(currentPlayersHealth - diff)\n        } else {\n            const diff  = currentPlayersHealth - currentMonsterHealth;\n            setPlayerHealth(currentMonsterHealth - diff)\n            console.log('monstor wins')   \n        }\n\n        if (playerHealth <= 0) {\n            console.log('play loses')\n        } else if (monsterHealth  <= 0) {\n            console.log('monster loses')\n        }\n        const dice : Array<number> = [diceOne, diceTwo, diceThree, diceFour];\n        setDice(dice);\n      }\n\n    return (\n        <GameStateProvider value={{playerHealth, setPlayerHealth, monsterHealth, setMonsterHealth, dice, setDice}}>\n            <Container>\n                <Player></Player>\n                <PlayerArea>\n                    <Dice roll={dice?.[0]}></Dice>\n                    <Dice roll={dice?.[1]}></Dice>\n                    {currentPlayersHealth}\n                </PlayerArea>\n                <MonsterArea>\n                    <Dice roll={dice?.[2]}></Dice>\n                    <Dice roll={dice?.[3]}></Dice>\n                    {currentMonsterHealth}\n                </MonsterArea>\n                <Monster></Monster>\n            </Container>\n            <Dashboard attackClick={handleGameClick}></Dashboard>\n        </GameStateProvider>\n)}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}