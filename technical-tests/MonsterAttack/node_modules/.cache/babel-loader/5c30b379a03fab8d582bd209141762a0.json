{"ast":null,"code":"var _jsxFileName = \"/Users/j.jones/Code/robotwars/src/App.tsx\";\nimport React, { useState } from 'react';\nimport Dice from './components/Game/Dice';\nimport Player from './components/Game/Player';\nimport Monster from './components/Game/Monster';\nimport Dashboard from './components/Game/Dashboard';\nimport styled from \"styled-components\";\nimport { GameStateProvider } from './context/GameStateContext';\nimport rollDice, { diceDifference } from './utils/dice';\nimport getLoser from './utils/getLoser';\nimport GameStatus from './types/GameStatus'; // used stylised component for simple rendering\n\nconst Game = styled.div`\n  border: 5px solid 6de0d0;\n  padding: 4em;\n`; // used stylised component for simple rendering\n\nconst MainArea = styled.div`\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n`;\nconst Score = styled.div`\n    text-align: center;\n    font-size: 4em;\n    font-weight: bold;\n`;\nconst DiceArea = styled.div`\n`;\n\nfunction App() {\n  const [playerHealth, setPlayerHealth] = useState(100);\n  const [monsterHealth, setMonsterHealth] = useState(100);\n  const [gameStatus, setGameStatus] = useState(GameStatus.Fighting);\n  const [dice, setDice] = useState();\n  const [currentPlayersHealth, setCurrentPlayersHealth] = useState(0);\n  const [currentMonsterHealth, setCurrentMonsterHealth] = useState(0);\n  console.log('ph', playerHealth);\n\n  function handleGameClick() {\n    const diceOne = rollDice();\n    const diceTwo = rollDice();\n    const diceThree = rollDice();\n    const diceFour = rollDice();\n    const playsScore = diceOne + diceTwo;\n    setCurrentPlayersHealth(playsScore);\n    const monstersScore = diceThree + diceFour;\n    setCurrentMonsterHealth(monstersScore);\n    console.log('currentPlayersHealth', playsScore);\n    console.log('currentMonsterHealth', monstersScore);\n\n    if (playsScore === monstersScore) {\n      console.log('draw');\n    } else if (monstersScore > playsScore) {\n      console.log('monstor wins');\n      const diff = diceDifference(playsScore, monstersScore);\n      console.log(diff);\n      const newHealth = playerHealth - diff;\n      setMonsterHealth(newHealth);\n    } else {\n      console.log('player wins');\n      const diff = diceDifference(monstersScore, playsScore);\n      console.log(diff);\n      const newHealth = playerHealth - diff;\n      setPlayerHealth(newHealth);\n    }\n\n    const status = getLoser(playerHealth, monsterHealth);\n    setGameStatus(status);\n    const dice = [diceOne, diceTwo, diceThree, diceFour];\n    setDice(dice);\n  }\n\n  return React.createElement(Game, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, React.createElement(GameStateProvider, {\n    value: {\n      playerHealth,\n      setPlayerHealth,\n      monsterHealth,\n      setMonsterHealth,\n      dice,\n      setDice\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, React.createElement(MainArea, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, React.createElement(Player, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }), React.createElement(DiceArea, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, React.createElement(Dice, {\n    roll: dice === null || dice === void 0 ? void 0 : dice[0],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }), React.createElement(Dice, {\n    roll: dice === null || dice === void 0 ? void 0 : dice[1],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }), currentPlayersHealth !== 0 && React.createElement(Score, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, currentPlayersHealth)), React.createElement(DiceArea, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, React.createElement(Dice, {\n    roll: dice === null || dice === void 0 ? void 0 : dice[2],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }), React.createElement(Dice, {\n    roll: dice === null || dice === void 0 ? void 0 : dice[3],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }), currentMonsterHealth !== 0 && React.createElement(Score, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, currentMonsterHealth)), React.createElement(Monster, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  })), React.createElement(Dashboard, {\n    attackClick: handleGameClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  })));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/j.jones/Code/robotwars/src/App.tsx"],"names":["React","useState","Dice","Player","Monster","Dashboard","styled","GameStateProvider","rollDice","diceDifference","getLoser","GameStatus","Game","div","MainArea","Score","DiceArea","App","playerHealth","setPlayerHealth","monsterHealth","setMonsterHealth","gameStatus","setGameStatus","Fighting","dice","setDice","currentPlayersHealth","setCurrentPlayersHealth","currentMonsterHealth","setCurrentMonsterHealth","console","log","handleGameClick","diceOne","diceTwo","diceThree","diceFour","playsScore","monstersScore","diff","newHealth","status"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,OAAP,MAAoB,2BAApB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,iBAAT,QAAkC,4BAAlC;AACA,OAAOC,QAAP,IAAmBC,cAAnB,QAAyC,cAAzC;AACA,OAAOC,QAAP,MAAqB,kBAArB;AACA,OAAOC,UAAP,MAAuB,oBAAvB,C,CAEA;;AACA,MAAMC,IAAI,GAAGN,MAAM,CAACO,GAAI;;;CAAxB,C,CAMA;;AACA,MAAMC,QAAQ,GAAGR,MAAM,CAACO,GAAI;;;CAA5B;AAKA,MAAME,KAAK,GAAGT,MAAM,CAACO,GAAI;;;;CAAzB;AAMA,MAAMG,QAAQ,GAAGV,MAAM,CAACO,GAAI;CAA5B;;AAGA,SAASI,GAAT,GAAe;AAEX,QAAM,CAAEC,YAAF,EAAgBC,eAAhB,IAAoClB,QAAQ,CAAC,GAAD,CAAlD;AACA,QAAM,CAAEmB,aAAF,EAAiBC,gBAAjB,IAAsCpB,QAAQ,CAAC,GAAD,CAApD;AACA,QAAM,CAAEqB,UAAF,EAAcC,aAAd,IAAgCtB,QAAQ,CAACU,UAAU,CAACa,QAAZ,CAA9C;AACA,QAAM,CAAEC,IAAF,EAAQC,OAAR,IAAoBzB,QAAQ,EAAlC;AAEA,QAAM,CAAE0B,oBAAF,EAAwBC,uBAAxB,IAAoD3B,QAAQ,CAAC,CAAD,CAAlE;AACA,QAAM,CAAE4B,oBAAF,EAAwBC,uBAAxB,IAAoD7B,QAAQ,CAAC,CAAD,CAAlE;AAEA8B,EAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ,EAAkBd,YAAlB;;AAEA,WAASe,eAAT,GAA2B;AACvB,UAAMC,OAAgB,GAAG1B,QAAQ,EAAjC;AACA,UAAM2B,OAAgB,GAAG3B,QAAQ,EAAjC;AAEA,UAAM4B,SAAkB,GAAG5B,QAAQ,EAAnC;AACA,UAAM6B,QAAiB,GAAG7B,QAAQ,EAAlC;AAEA,UAAM8B,UAAU,GAAGJ,OAAO,GAAGC,OAA7B;AACAP,IAAAA,uBAAuB,CAACU,UAAD,CAAvB;AAEA,UAAMC,aAAa,GAAGH,SAAS,GAAGC,QAAlC;AACAP,IAAAA,uBAAuB,CAACS,aAAD,CAAvB;AAEAR,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCM,UAApC;AACAP,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCO,aAApC;;AAEA,QAAID,UAAU,KAAKC,aAAnB,EAAkC;AAC9BR,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACH,KAFD,MAEO,IAAIO,aAAa,GAAGD,UAApB,EAAgC;AACnCP,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AAEA,YAAMQ,IAAI,GAAG/B,cAAc,CAAC6B,UAAD,EAAaC,aAAb,CAA3B;AACAR,MAAAA,OAAO,CAACC,GAAR,CAAYQ,IAAZ;AACA,YAAMC,SAAS,GAAGvB,YAAY,GAAGsB,IAAjC;AACAnB,MAAAA,gBAAgB,CAACoB,SAAD,CAAhB;AACH,KAPM,MAOA;AACHV,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACA,YAAMQ,IAAI,GAAG/B,cAAc,CAAC8B,aAAD,EAAgBD,UAAhB,CAA3B;AACAP,MAAAA,OAAO,CAACC,GAAR,CAAYQ,IAAZ;AACA,YAAMC,SAAS,GAAGvB,YAAY,GAAGsB,IAAjC;AACArB,MAAAA,eAAe,CAACsB,SAAD,CAAf;AAEH;;AAED,UAAMC,MAAM,GAAGhC,QAAQ,CAACQ,YAAD,EAAeE,aAAf,CAAvB;AACAG,IAAAA,aAAa,CAACmB,MAAD,CAAb;AAEA,UAAMjB,IAAoB,GAAG,CAACS,OAAD,EAAUC,OAAV,EAAmBC,SAAnB,EAA8BC,QAA9B,CAA7B;AACAX,IAAAA,OAAO,CAACD,IAAD,CAAP;AACD;;AAEH,SACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,iBAAD;AAAmB,IAAA,KAAK,EAAE;AAACP,MAAAA,YAAD;AAAeC,MAAAA,eAAf;AAAgCC,MAAAA,aAAhC;AAA+CC,MAAAA,gBAA/C;AAAiEI,MAAAA,IAAjE;AAAuEC,MAAAA;AAAvE,KAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAED,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAG,CAAH,CAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAEA,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAG,CAAH,CAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,EAGKE,oBAAoB,KAAK,CAAzB,IACG,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKA,oBADL,CAJR,CAFJ,EAUI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAEF,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAG,CAAH,CAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAEA,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAG,CAAH,CAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,EAGKI,oBAAoB,KAAK,CAAzB,IACG,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKA,oBADL,CAJR,CAVJ,EAkBI,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAlBJ,CADJ,EAqBI,oBAAC,SAAD;AAAW,IAAA,WAAW,EAAEI,eAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IArBJ,CADJ,CADJ;AA0BF;;AAEF,eAAehB,GAAf","sourcesContent":["import React, { useState } from 'react';\nimport Dice from './components/Game/Dice';\nimport Player from './components/Game/Player';\nimport Monster from './components/Game/Monster';\nimport Dashboard from './components/Game/Dashboard';\nimport styled from \"styled-components\"\nimport { GameStateProvider } from './context/GameStateContext';\nimport rollDice, { diceDifference } from './utils/dice';\nimport getLoser from './utils/getLoser';\nimport GameStatus from './types/GameStatus'\n\n// used stylised component for simple rendering\nconst Game = styled.div`\n  border: 5px solid 6de0d0;\n  padding: 4em;\n`\n\n\n// used stylised component for simple rendering\nconst MainArea = styled.div`\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n`\n\nconst Score = styled.div`\n    text-align: center;\n    font-size: 4em;\n    font-weight: bold;\n`\n\nconst DiceArea = styled.div`\n`\n\nfunction App() {\n\n    const [ playerHealth, setPlayerHealth ] = useState(100);\n    const [ monsterHealth, setMonsterHealth ] = useState(100);\n    const [ gameStatus, setGameStatus ] = useState(GameStatus.Fighting);\n    const [ dice, setDice ] = useState();\n\n    const [ currentPlayersHealth, setCurrentPlayersHealth ] = useState(0);\n    const [ currentMonsterHealth, setCurrentMonsterHealth ] = useState(0);\n\n    console.log('ph', playerHealth)\n\n    function handleGameClick() {\n        const diceOne : number = rollDice();\n        const diceTwo : number = rollDice();\n\n        const diceThree : number = rollDice();\n        const diceFour : number = rollDice();\n\n        const playsScore = diceOne + diceTwo;\n        setCurrentPlayersHealth(playsScore);\n\n        const monstersScore = diceThree + diceFour;\n        setCurrentMonsterHealth(monstersScore);\n\n        console.log('currentPlayersHealth', playsScore)\n        console.log('currentMonsterHealth', monstersScore)\n\n        if (playsScore === monstersScore) {\n            console.log('draw')\n        } else if (monstersScore > playsScore) {\n            console.log('monstor wins')   \n\n            const diff = diceDifference(playsScore, monstersScore)\n            console.log(diff)\n            const newHealth = playerHealth - diff\n            setMonsterHealth(newHealth)\n        } else {\n            console.log('player wins')\n            const diff = diceDifference(monstersScore, playsScore)\n            console.log(diff)\n            const newHealth = playerHealth - diff\n            setPlayerHealth(newHealth)\n\n        }\n\n        const status = getLoser(playerHealth, monsterHealth);\n        setGameStatus(status)\n\n        const dice : Array<number> = [diceOne, diceTwo, diceThree, diceFour];\n        setDice(dice);\n      }\n\n    return (\n        <Game>\n            <GameStateProvider value={{playerHealth, setPlayerHealth, monsterHealth, setMonsterHealth, dice, setDice}}>\n                <MainArea>\n                    <Player />\n                    <DiceArea>\n                        <Dice roll={dice?.[0]}></Dice>\n                        <Dice roll={dice?.[1]}></Dice>\n                        {currentPlayersHealth !== 0 && \n                            <Score>\n                                {currentPlayersHealth}\n                            </Score>}\n                    </DiceArea>\n                    <DiceArea>\n                        <Dice roll={dice?.[2]}></Dice>\n                        <Dice roll={dice?.[3]}></Dice>\n                        {currentMonsterHealth !== 0 && \n                            <Score>\n                                {currentMonsterHealth}\n                            </Score>}\n                    </DiceArea>\n                    <Monster />\n                </MainArea>\n                <Dashboard attackClick={handleGameClick}></Dashboard>\n            </GameStateProvider>\n        </Game>\n)}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}