{"ast":null,"code":"import _regeneratorRuntime from \"/Users/j.jones/Code/pirum-react-test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/j.jones/Code/pirum-react-test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport axios from 'axios';\nimport { FETCH_SONGS_REQUEST, FETCH_SONGS_SUCCESS, FETCH_SONGS_ERROR } from '../constants/actionTypes';\n\nvar fetchSongsRequest = function fetchSongsRequest() {\n  return {\n    type: FETCH_SONGS_REQUEST\n  };\n};\n\nvar fetchSongsSuccess = function fetchSongsSuccess(response) {\n  return {\n    type: FETCH_SONGS_SUCCESS,\n    response: response\n  };\n};\n\nvar fetchSongsError = function fetchSongsError(error) {\n  return {\n    type: FETCH_SONGS_ERROR,\n    error: error\n  };\n};\n\nvar fetchSongs = function fetchSongs() {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(dispatch) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                dispatch(fetchSongsRequest());\n                axios.get('http://localhost:5000/api/songs').then(function (response) {\n                  dispatch(fetchSongsSuccess(response));\n                }).catch(function (error) {\n                  dispatch(fetchSongsError(error.message));\n                  throw error;\n                });\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n};\n\nexport default fetchSongs;","map":{"version":3,"sources":["/Users/j.jones/Code/pirum-react-test/src/state/actions/fetchSongs.js"],"names":["axios","FETCH_SONGS_REQUEST","FETCH_SONGS_SUCCESS","FETCH_SONGS_ERROR","fetchSongsRequest","type","fetchSongsSuccess","response","fetchSongsError","error","fetchSongs","dispatch","get","then","catch","message"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACIC,mBADJ,EAEIC,mBAFJ,EAGIC,iBAHJ,QAIO,0BAJP;;AAMA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB;AAAA,SAAO;AAC7BC,IAAAA,IAAI,EAAEJ;AADuB,GAAP;AAAA,CAA1B;;AAIA,IAAMK,iBAAiB,GAAG,SAApBA,iBAAoB,CAAAC,QAAQ;AAAA,SAAK;AACnCF,IAAAA,IAAI,EAAEH,mBAD6B;AAEnCK,IAAAA,QAAQ,EAARA;AAFmC,GAAL;AAAA,CAAlC;;AAKA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,KAAK;AAAA,SAAK;AAC9BJ,IAAAA,IAAI,EAAEF,iBADwB;AAE9BM,IAAAA,KAAK,EAALA;AAF8B,GAAL;AAAA,CAA7B;;AAKA,IAAMC,UAAU,GAAG,SAAbA,UAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAM,iBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AACrBA,gBAAAA,QAAQ,CAACP,iBAAiB,EAAlB,CAAR;AACAJ,gBAAAA,KAAK,CAACY,GAAN,CAAU,iCAAV,EACKC,IADL,CACU,UAAAN,QAAQ,EAAI;AACdI,kBAAAA,QAAQ,CAACL,iBAAiB,CAACC,QAAD,CAAlB,CAAR;AACH,iBAHL,EAIKO,KAJL,CAIW,UAAAL,KAAK,EAAI;AACZE,kBAAAA,QAAQ,CAACH,eAAe,CAACC,KAAK,CAACM,OAAP,CAAhB,CAAR;AACA,wBAAMN,KAAN;AACH,iBAPL;;AAFqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAN;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAnB;;AAYA,eAAeC,UAAf","sourcesContent":["import axios from 'axios'\nimport {\n    FETCH_SONGS_REQUEST,\n    FETCH_SONGS_SUCCESS,\n    FETCH_SONGS_ERROR\n} from '../constants/actionTypes';\n\nconst fetchSongsRequest = () => ({\n    type: FETCH_SONGS_REQUEST\n});\n\nconst fetchSongsSuccess = response => ({\n    type: FETCH_SONGS_SUCCESS,\n    response\n});\n\nconst fetchSongsError = error => ({\n    type: FETCH_SONGS_ERROR,\n    error\n});\n\nconst fetchSongs = () => async (dispatch) => {\n    dispatch(fetchSongsRequest());\n    axios.get('http://localhost:5000/api/songs')\n        .then(response => {\n            dispatch(fetchSongsSuccess(response));\n        })\n        .catch(error => {\n            dispatch(fetchSongsError(error.message));\n            throw error;\n        });\n};\n\nexport default fetchSongs;"]},"metadata":{},"sourceType":"module"}