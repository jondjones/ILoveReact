{"ast":null,"code":"var $ = require('../internals/export');\n\nvar anObject = require('../internals/an-object');\n\nvar isObject = require('../internals/is-object');\n\nvar has = require('../internals/has');\n\nvar definePropertyModule = require('../internals/object-define-property');\n\nvar getOwnPropertyDescriptorModule = require('../internals/object-get-own-property-descriptor');\n\nvar getPrototypeOf = require('../internals/object-get-prototype-of');\n\nvar createPropertyDescriptor = require('../internals/create-property-descriptor'); // `Reflect.set` method\n// https://tc39.github.io/ecma262/#sec-reflect.set\n\n\nfunction set(target, propertyKey, V\n/* , receiver */\n) {\n  var receiver = arguments.length < 4 ? target : arguments[3];\n  var ownDescriptor = getOwnPropertyDescriptorModule.f(anObject(target), propertyKey);\n  var existingDescriptor, prototype;\n\n  if (!ownDescriptor) {\n    if (isObject(prototype = getPrototypeOf(target))) {\n      return set(prototype, propertyKey, V, receiver);\n    }\n\n    ownDescriptor = createPropertyDescriptor(0);\n  }\n\n  if (has(ownDescriptor, 'value')) {\n    if (ownDescriptor.writable === false || !isObject(receiver)) return false;\n\n    if (existingDescriptor = getOwnPropertyDescriptorModule.f(receiver, propertyKey)) {\n      if (existingDescriptor.get || existingDescriptor.set || existingDescriptor.writable === false) return false;\n      existingDescriptor.value = V;\n      definePropertyModule.f(receiver, propertyKey, existingDescriptor);\n    } else definePropertyModule.f(receiver, propertyKey, createPropertyDescriptor(0, V));\n\n    return true;\n  }\n\n  return ownDescriptor.set === undefined ? false : (ownDescriptor.set.call(receiver, V), true);\n}\n\n$({\n  target: 'Reflect',\n  stat: true\n}, {\n  set: set\n});","map":null,"metadata":{},"sourceType":"script"}