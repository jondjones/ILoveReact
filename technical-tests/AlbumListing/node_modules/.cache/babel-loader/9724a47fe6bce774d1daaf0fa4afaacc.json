{"ast":null,"code":"const getAlbums = state => {\n  // could have used new ES7 optional chaining to make nicer\n  const songs = state && state.songs && state.songs.items ? state.songs.items : [];\n  const groupedByAlbums = groupBy(songs).sort(compare);\n  return {\n    albums: groupedByAlbums || [],\n    hasAlbums: groupedByAlbums && groupedByAlbums.length > 0\n  };\n};\n\nexport const compare = (a, b) => {\n  const bandA = a.band.toUpperCase();\n  const bandB = b.band.toUpperCase();\n  let comparison = 0;\n\n  if (bandA > bandB) {\n    comparison = 1;\n  } else if (bandA < bandB) {\n    comparison = -1;\n  }\n\n  return comparison;\n}; // would unot test this\n\nexport const groupBy = songs => {\n  let helper = {}; // Using reduce to avoid mutating items\n\n  return songs.reduce((reducer, current) => {\n    var key = \"\".concat(current.band, \" - \").concat(current.album); //Group by album with songs\n\n    if (!helper[key]) {\n      helper[key] = Object.assign({}, current);\n      (helper[key].songs = []).push(current.song); // remove individual song from top level property\n\n      delete helper[key].song;\n      reducer.push(helper[key]);\n    } else {\n      helper[key].songs.push(current.song);\n    }\n\n    return reducer;\n  }, []);\n};\nexport default getAlbums;","map":{"version":3,"sources":["/Users/j.jones/Code/pirum-react-test/src/state/selectors/getAlbums.js"],"names":["getAlbums","state","songs","items","groupedByAlbums","groupBy","sort","compare","albums","hasAlbums","length","a","b","bandA","band","toUpperCase","bandB","comparison","helper","reduce","reducer","current","key","album","Object","assign","push","song"],"mappings":"AAAA,MAAMA,SAAS,GAAGC,KAAK,IAAI;AACvB;AACA,QAAMC,KAAK,GAAGD,KAAK,IAAIA,KAAK,CAACC,KAAf,IAAwBD,KAAK,CAACC,KAAN,CAAYC,KAApC,GAA4CF,KAAK,CAACC,KAAN,CAAYC,KAAxD,GAAgE,EAA9E;AACA,QAAMC,eAAe,GAAGC,OAAO,CAACH,KAAD,CAAP,CAAeI,IAAf,CAAoBC,OAApB,CAAxB;AAEA,SAAO;AACHC,IAAAA,MAAM,EAAEJ,eAAe,IAAI,EADxB;AAEHK,IAAAA,SAAS,EAAEL,eAAe,IAAIA,eAAe,CAACM,MAAhB,GAAyB;AAFpD,GAAP;AAIH,CATD;;AAUA,OAAO,MAAMH,OAAO,GAAG,CAACI,CAAD,EAAIC,CAAJ,KAAU;AAC/B,QAAMC,KAAK,GAAGF,CAAC,CAACG,IAAF,CAAOC,WAAP,EAAd;AACA,QAAMC,KAAK,GAAGJ,CAAC,CAACE,IAAF,CAAOC,WAAP,EAAd;AAEA,MAAIE,UAAU,GAAG,CAAjB;;AACA,MAAIJ,KAAK,GAAGG,KAAZ,EAAmB;AACjBC,IAAAA,UAAU,GAAG,CAAb;AACD,GAFD,MAEO,IAAIJ,KAAK,GAAGG,KAAZ,EAAmB;AACxBC,IAAAA,UAAU,GAAG,CAAC,CAAd;AACD;;AACD,SAAOA,UAAP;AACD,CAXM,C,CAaP;;AACA,OAAO,MAAMZ,OAAO,GAAGH,KAAK,IAAI;AAC9B,MAAIgB,MAAM,GAAG,EAAb,CAD8B,CAG9B;;AACA,SAAOhB,KAAK,CAACiB,MAAN,CAAa,CAACC,OAAD,EAAUC,OAAV,KAAsB;AACxC,QAAIC,GAAG,aAAMD,OAAO,CAACP,IAAd,gBAAwBO,OAAO,CAACE,KAAhC,CAAP,CADwC,CAGxC;;AACA,QAAG,CAACL,MAAM,CAACI,GAAD,CAAV,EAAiB;AACfJ,MAAAA,MAAM,CAACI,GAAD,CAAN,GAAcE,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,OAAlB,CAAd;AACA,OAACH,MAAM,CAACI,GAAD,CAAN,CAAYpB,KAAZ,GAAoB,EAArB,EAAyBwB,IAAzB,CAA8BL,OAAO,CAACM,IAAtC,EAFe,CAIf;;AACA,aAAOT,MAAM,CAACI,GAAD,CAAN,CAAYK,IAAnB;AACAP,MAAAA,OAAO,CAACM,IAAR,CAAaR,MAAM,CAACI,GAAD,CAAnB;AACD,KAPD,MAOO;AACLJ,MAAAA,MAAM,CAACI,GAAD,CAAN,CAAYpB,KAAZ,CAAkBwB,IAAlB,CAAuBL,OAAO,CAACM,IAA/B;AACD;;AAED,WAAOP,OAAP;AACH,GAhBQ,EAgBN,EAhBM,CAAP;AAiBD,CArBM;AAuBP,eAAepB,SAAf","sourcesContent":["const getAlbums = state => {\n    // could have used new ES7 optional chaining to make nicer\n    const songs = state && state.songs && state.songs.items ? state.songs.items : [];\n    const groupedByAlbums = groupBy(songs).sort(compare);\n\n    return { \n        albums: groupedByAlbums || [],\n        hasAlbums: groupedByAlbums && groupedByAlbums.length > 0\n    }\n};\nexport const compare = (a, b) => {\n  const bandA = a.band.toUpperCase();\n  const bandB = b.band.toUpperCase();\n\n  let comparison = 0;\n  if (bandA > bandB) {\n    comparison = 1;\n  } else if (bandA < bandB) {\n    comparison = -1;\n  }\n  return comparison;\n}\n\n// would unot test this\nexport const groupBy = songs => {\n  let helper = {};\n\n  // Using reduce to avoid mutating items\n  return songs.reduce((reducer, current) => {\n    var key = `${current.band} - ${current.album}`;\n\n    //Group by album with songs\n    if(!helper[key]) {\n      helper[key] = Object.assign({}, current);\n      (helper[key].songs = []).push(current.song);\n\n      // remove individual song from top level property\n      delete helper[key].song;\n      reducer.push(helper[key]);\n    } else {\n      helper[key].songs.push(current.song);\n    }\n\n    return reducer;\n}, []);\n}\n\nexport default getAlbums;\n"]},"metadata":{},"sourceType":"module"}